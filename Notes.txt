warning LNK4075: ignoring '/EDITANDCONTINUE' due to '/OPT:LBR' specification
============================================================================
https://social.msdn.microsoft.com/Forums/vstudio/en-US/6d5c3c66-3d69-4391-9d3b-745f27acf8c7/cant-enable-edit-and-continue-due-to-optlbr-option?forum=vcgeneral
LINK warning LNK4075: ignoring '/INCREMENTAL' due to '/LTCG' specification
It is easily fixed by changing the VS Project Properties:
setting Linker >> General >> Enable Incremental Linking :(/INCREMENTAL:NO)

But:
You need to leave the existing settings for the Debugging Configuration build (i.e. /INCREMENTAL:Yes) otherwise you get the warning:
warning LNK4075: ignoring '/EDITANDCONTINUE' due to '/OPT:LBR' specification

The article http://stackoverflow.com/questions/21965816/warning-lnk4075-when-a-c-cli-project-references-a-static-lib-project-with-zi explains that this is actually a bogus message. The real cause of the problem is the fact that C++/CLI projects do not support EditAndContinue because they also don't support Incremental building. It is the compiler that enables EditAndContinue for an object file using the "Debug Information Format: Program Database for Edit And Continue (/ZI)" flag. You'll have to change that flag to "Program Database (/Zi)" for both projects - the executable and the static lib.
--------------------------------------------

Netmon and npptools.dll are no longer part of Windows Vista. You can get Netmon 3.0 as a standalone from http://connect.microsoft.com. For more info, their blog is at http://blogs.technet.com/netmon/.

https://stackoverflow.com/questions/10727568/cannot-convert-parameter-1-from-const-char-to-lpcwstr
Most of the Windows APIs that take strings have two versions: one that takes char * and one that takes WCHAR * (that latter is equivalent to wchar_t *).

SetWindowText, for example, is actually a macro that expands to either SetWindowTextA (which takes char *) or SetWindowTextW (which takes WCHAR *).

In your project, it sounds like all of these macros are referencing the -W versions. This is controlled by the UNICODE preprocessor macro (which is defined if you choose the "Use Unicode Character Set" project option in Visual Studio). (Some of Microsoft's C and C++ run time library functions also have ANSI and wide versions. Which one you get is selected by the similarly-named _UNICODE macro that is also defined by that Visual Studio project setting.)

Typically, both of the -A and -W functions exist in the l

/showIncludes
=============
https://msdn.microsoft.com/en-us/library/hdkef6tk.aspx
When an include file is encountered during compilation, a message is output, for example:
Note: including file: d:\MyDir\include\stdio.h

Nested include files are indicated by an indentation, one space for each level of nesting, for example:
Note: including file: d:\temp\1.h
Note: including file:  d:\temp\2.h


inet_addr() is deprecated because it doesn't handle IPv6! Use inet_ntop() or inet_pton() instead!


NDIS6X
WIN_NT_DRIVER
NPF_NPCAP_RUN_IN_WINPCAP_MODE
HAVE_WFP_LOOPBACK_SUPPORT
HAVE_RX_SUPPORT
HAVE_DOT11_SUPPORT
POOL_NX_OPTIN=1
DBG=1
_X86_=1
i386=1
STD_CALL
%(PreprocessorDefinitions)
WIN_VER=0x0600
_WIN32_WINNT=0x0600
NTDDI_VERSION=0x06000100

HAVE_CONFIG_H;NPF_NPCAP_RUN_IN_WINPCAP_MODE;WIN_NT_DRIVER;HAVE_WFP_LOOPBACK_SUPPORT;NDIS6X;HAVE_RX_SUPPORT;HAVE_DOT11_SUPPORT;POOL_NX_OPTIN;DBG;%(PreprocessorDefinitions)

wdmsec.lib
ndis.lib
Ntstrsafe.lib
$(DDK_LIB_PATH)\fwpkclnt.lib
$(SDK_LIB_PATH)\uuid.lib
$(DDK_LIB_PATH)\netio.lib


The form of decoration for a C function depends on the calling convention used in its declaration,
as shown in the following table. This is also the decoration format that is used when C++ code is
declared to have extern "C" linkage. The default calling convention is __cdecl. Note that in a
64-bit environment, functions are not decorated.

The concept is very old. Unfortunately the documentation is not easy to locate.  Look in the Windows Internals books. Perhaps MSDN editors assumed that everyone and their grandparents are familiar with it already.

So... I'd try and make very rough superficial overview.

Basically, there are four kinds of network components: clients, services, protocols and adapters. /* Four is a well known magic number: The Gang of Four, four levels of PCI IRQLs, four edges of a dollar bill, and so on */

An example of client is the Workstation service (yes, a service - but it's a client towards lower-layer services. Services are various components that sit in background and provide various network-related functions.

Examples of protocols are, obviously,  tcpip v4 and tcpip v6 and others, such as SSTP,  L2TP, LLTD and so on.

Protocols usually talk directly to adapters but can also talk to lower protocols.  

Adapters are usually hardware netcards, or dial-up interfaces, or various virtual things such as tunnels, bridges etc. Their physical medium (or emulation of it) define "network topology"and behavior.

Now, every component has set of upper and lower interfaces: a client binds to services, services - to protocols, protocols - to adapters and/or other protocols. Adapters bind to physical medium (or pretend to).

The configuration of network in each given Windows system is defined by set of all above installed components, plus information on which of them is bound exactly to which, in which order.

By convention, every module has one connection on top to it's upper layer, and several connections on its bottom edge towards lower layers. For example, WINS service can talk to every network adapter, via tcpip v4 and v6 to each. Each component provides several "instances" of itself for each connection to upper component. 

So we get a tree of all such connections, called "bindings". Any path in this tree from top to bottom is called "binding path". By convention, these paths cannot have loops :) All this information is somehow stored in the registry, so that it survives restarts.

Next, it is logical to suppose that we want to be able to break some of these connections. For example we want the Windows networking to connect only to certain netcard and not others. Or temporarily disable IPv6 on some adapter. Thus, the concept of disabling & enabling paths, or deleting and e-creating them.

And now -  wake up, N.! :) - comes  the Bindview.

What you see in Bindview is this binding information, presented for every kind of components, top to bottom. 

It also allows disable and enable every segment of binding path. As an extra, it allows install non-PnP components by calling INetCfg APIs).


Dizzy? Go read some books....

-- pa
